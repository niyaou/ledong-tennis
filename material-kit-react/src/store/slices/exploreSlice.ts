import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { fetching, Fetching, Response, Pager } from '../../common/interface'
import { getDataDictionary } from '../../api/dataset/dataDictionaryRequest'
import { getDataSet, GetDataSetParams, getDataSetByTopic, GetDataSetByTopicParams } from '../../api/dataset/dataSetRequest'
import { getErrorMsg } from '../../common/utils/reduxUtil'

export interface ExploreState extends Fetching {
    dataDictionary: {
        dataType: any[],
        labelType: any[],
        taskType: any[],
        usedScene: any[],
    };
    pager: Pager<any>;
}

const initialState: ExploreState = {
    ...fetching,
    loading: false,
    dataDictionary: {
        dataType: [],
        labelType: [],
        taskType: [],
        usedScene: [],
    },
    pager: {
        content: [],
        empty: true,
        first: true,
        last: true,
        number: 0,
        numberOfElements: 0,
        size: 0,
        totalElements: 0,
        totalPages: 0,
    },
}
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataDictionaryAction = createAsyncThunk(
    'explore/getDataDictionary',
    async (params: string[], { rejectWithValue }) => {
        try {
            return await getDataDictionary(params);
        } catch (err) {
            return rejectWithValue(err)
        }
    }

);

export const getDataSetAction = createAsyncThunk(
    'explore/getDataSet',
    async (params: GetDataSetParams, { rejectWithValue }) => {
        try {
            return await getDataSet(params);
        } catch (err) {
            return rejectWithValue(err)
        }
    }
);

export const getDataSetByTopicAction = createAsyncThunk(
    'type/getDataSet',
    async (params: GetDataSetByTopicParams, { rejectWithValue }) => {
        try {
            return await getDataSetByTopic(params);
        } catch (err) {
            return rejectWithValue(err)
        }
    }
);


export const exploreSlice = createSlice({
    name: 'explore',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // increment: (state) => {
        //     state.value += 1;
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        //todo 简化
        builder
            .addCase(getDataDictionaryAction.pending, (state) => {
                state.loadError = false
                state.loading = true
            })
            .addCase(getDataDictionaryAction.rejected, (state, action) => {
                state.loadError = true
                state.loading = false
                state.errorMsg = getErrorMsg(action)
            })
            .addCase(getDataDictionaryAction.fulfilled, (state, action) => {
                state.loading = false
                state.dataDictionary = action.payload.data
            });

        builder
            .addCase(getDataSetAction.pending, (state) => {
                state.loadError = false
                state.loading = true
            })
            .addCase(getDataSetAction.rejected, (state, action) => {
                state.loadError = true
                state.loading = false
                state.errorMsg = getErrorMsg(action)
            })
            .addCase(getDataSetAction.fulfilled, (state, action) => {
                state.loading = false
                state.pager = action.payload.data
            });

        builder
            .addCase(getDataSetByTopicAction.pending, (state) => {
                state.loadError = false
                state.loading = true
            })
            .addCase(getDataSetByTopicAction.rejected, (state, action) => {
                state.loadError = true
                state.loading = false
                state.errorMsg = getErrorMsg(action)
            })
            .addCase(getDataSetByTopicAction.fulfilled, (state, action) => {
                state.loading = false
                state.pager = action.payload.data
            });
    },
});

// export const { increment, decrement, incrementByAmount } = exploreSlice.actions;
export default exploreSlice.reducer;
