import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { fetching, Fetching, Response, Pager } from '../../common/interface'
import Axios from '../../common/axios/axios'
import { getErrorMsg } from '../../common/utils/reduxUtil'

export interface CommentState extends Fetching {
    isChanged: boolean;
    loading: boolean;
    pager: Pager<any>;
}

export interface Comment {
    classObj: string;
    classType: string;
    content: string;
    parentId?: number;
    title: string;
    visibleScale: number;
}

const initialState = {
    ...fetching,
    isChanged: false,
    loading: false,
    open: false,
    pager: {
        content: [],
        empty: true,
        first: true,
        last: true,
        number: 0,
        numberOfElements: 0,
        size: 0,
        totalElements: 0,
        totalPages: 0,
    }
}

export const submitCommentAction = createAsyncThunk(
    'comment/submit',
    async (params, { rejectWithValue }) => {
        try {
            // throw new Error('Something bad happened');
            const result = await Axios.post(`/api/pangoo-comment/comment`, params)
            return result.data;
        } catch (err) {
            return rejectWithValue(err)
        }
    }
);

export const getCommentAction = createAsyncThunk(
    'comment/get',
    async (params: {
        classObj: string;
        classType: string;
        page?: number;
        size?: number;
    }, { rejectWithValue }) => {
        try {
            // throw new Error('Something bad happened');
            const result = await Axios.get(`/api/pangoo-comment/comment`, {
                params
            })
            return result.data;
        } catch (err) {
            return rejectWithValue(err)
        }
    }
);

export const commentSlice = createSlice({
    name: 'comment',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        isChangedAction: (state: CommentState) => {
            state.isChanged = true
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getCommentAction.pending, (state) => {
                state.loading = true
            })
            .addCase(getCommentAction.rejected, (state, action) => {
                state.loadError = true
                state.loading = false
                state.errorMsg = getErrorMsg(action)
            })
            .addCase(getCommentAction.fulfilled, (state, action) => {
                let response = action.payload as Response<Pager<any>>
                state.pager = response.data
                state.loading = false
                state.isChanged = false
            })
        builder
            .addCase(submitCommentAction.pending, (state) => {
                state.loading = true
            })
            .addCase(submitCommentAction.rejected, (state, action) => {
                state.loadError = true
                state.loading = false
                state.errorMsg = getErrorMsg(action)
            })
            .addCase(submitCommentAction.fulfilled, (state, action) => {
                state.loading = false
                state.isChanged = true
            })

    },
});

export const { isChangedAction } = commentSlice.actions;

export default commentSlice.reducer;
